<script type="text/javascript">
    $(document).ready(function() {

		// general repeating interval interrupt
		pauseMainInterval = '';
		runningIntervals = {};
		runningIntQueue = [];
		setInterval(function() {
				// wan status
				ajaxrefresh('/admin/get_wan_status','#wan-connection');
		}, 3000);
		ajaxrefresh('/admin/get_wan_status','#wan-connection');
		setInterval(function() {
				// routing toggle switch state
				ajaxrefresh('/admin/routing_status','',
				 "var state=data; if(state) { $('.bootstrap-switch-id-nroutingswitch').removeClass('bootstrap-switch-on').addClass('bootstrap-switch-off'); } else { $('.bootstrap-switch-id-nroutingswitch').removeClass('bootstrap-switch-off').addClass('bootstrap-switch-on'); }"
				);
		}, 15000);
		
        function ajaxrefresh(url, element, successfunction) {
			// fix for limited memory: define a static, symbolic url, and use a queue for the requests
			var doubleEntry = 0;
			for (var i = 0; i < runningIntQueue.length; i++) {
				if (typeof runningIntQueue[i] != 'undefined') if (runningIntQueue[i].u == url) doubleEntry ++;
			}
			if(doubleEntry<3) runningIntQueue.push({'u':url,'e':element,'f':successfunction});
			url = 'singlerequest';
			// check to see if we are already running/waiting for an interval
			if(typeof runningIntervals[url] == 'undefined') {
				runningIntervals[url] = 0;
			}
			// if not, perform the AJAX function
			if(runningIntervals[url] <= 0) {
				runningIntervals[url] = 12;
				var req = runningIntQueue.shift();
				console.log('Requesting AJAX refresh now for "'+req.u+'".');
				if(pauseMainInterval != req.u) {
					$.ajax({
						type: "GET",
						url: req.u,
						success: function(data) {
							runningIntervals[url] = 0;
							if(req.f) {
								eval(req.f);
							} else {
								$(req.e).html(data);
							}
						}
					});
				} else {
					console.log('Refresh interval paused for "'+req.u+'".');
				}
			} else {
				console.log('AJAX request busy. '+runningIntervals[url]+' ticks until forcing new call. Queue size is '+runningIntQueue.length+'.');
				runningIntervals[url]--;
			}
		}

		function spinner(element) {
			$(element).html('<div class=\'spinner\' style=\'padding-top: 24px;\'><div class=\'spinner-loader\'></div></div>');
		}

        function _tr(string, action) {
			$.post("client/translate",
			{
				q: string
			},
			function(string, status){
				action;
			});				
		}

        function _echo(element, string) {
			$.post("client/translate",
			{
				q: string
			},
			function(string, status){
                $(element).html(string);
			});				
		}
		
        //
        //	higher level AJAX GUI functions
        //

        function updateWifi() {
			$('#wifi-list').html('<div class="spinner" style="margin-top: 45px;"><div class="spinner-loader"></div></div>');
            $.ajax({
                type: "GET",
                url: "/admin/get_wifi",
                success: function(data) {
                    $('#wifi-list').html(data);
                    $('#wifi-list').trigger("create");
                }
            });
        }
        updateWifi();
        
        function updateTiles() {
			// clear all intervals first
			if(typeof intervaltor!='undefined') { clearInterval(intervaltor); }
			if(typeof intervalvpn!='undefined') { clearInterval(intervalvpn); }
			// update TOR tile display
			$.ajax({
				type: "GET",
				url: "/admin/display_tor",
				success: function(data) {
					$('#module-tor').html(data);
					updateTorStatus();
					intervaltor = setInterval(function() {
						updateTorStatus();
					}, 2000);
					attacheventtor();
				},
				failure: function() {
					// or set buttons back to default state
					$('#module-tor .tile a').addClass('btn-primary').removeClass('btn-disabled');
				}
			});
			// update VPN tile display
			$.ajax({
				type: "GET",
				url: "/admin/display_vpn",
				success: function(data) {
					$('#module-vpn').html(data);
					updateVpnStatus();
					intervalvpn = setInterval(function() {
						updateVpnStatus();
					}, 2000);
					attacheventvpn();
				},
				failure: function() {
					// or set buttons back to default state
					$('#module-vpn .tile a').addClass('btn-primary').removeClass('btn-disabled');
				}
			});
        }

        <?php if ( ($this->_params['cur_stage'] == 'tor'
                    && $this->_params['tor_status'] != '100') ||
                   ($this->_params['cur_stage'] == 'vpn'
                    && $this->_params['vpn_status'] != '100') ): ?>
						updateTiles();
        <?php endif; ?>

        function updateTorStatus() {
			ajaxrefresh('/admin/tor_status','#torprogressbar',
			 "$(element).css('width', data + '%'); if (data == '100') { $('#TorStatus').html('<?php echo _("<h3>You are connected to Tor</h3>"); ?>'); $('#torTile').addClass('connected'); clearInterval(intervaltor); }"
			);
        }
        
        function updateVpnStatus() {
			ajaxrefresh('/admin/vpn_status','#vpnprogressbar',
			 "$(element).css('width', data + '%'); if (data == '100') { $('#VpnStatus').html('<?php echo _("<h3>You are connected to a VPN</h3>"); ?>'); $('#VpnTile').addClass('connected'); $('#vpn_connected').css('display', 'block'); clearInterval(intervalvpn); }"
            );
        }

        //
        //	events attached to clickable elements
        //

		function attacheventtor() {
			$('.toggle-tor').click(function(event) {
				$('#module-vpn .tile a').removeClass('btn-primary').addClass('btn-disabled');
				$('#module-tor .tile a').removeClass('btn-primary').addClass('btn-disabled');
				$('.progress').hide();
				spinner('#module-tor .tile p');
				$.ajax({
					type: "GET",
					url: "/admin/toggle_tor",
					success: function(data) {
						if (data == 'SUCCESS') {
							setTimeout( function() {
								updateTiles();
							}, 12000);
						} else {
							pushNotification(['Something went wrong toggling the TOR connection. Are you connected to the Internet?','warning','Close']);
						}
					}
				});
				event.preventDefault();
			});
		}
		attacheventtor();

		function attacheventvpn() {
			$('.toggle-vpn').click(function(event) {
				if(!$('.toggle-vpn').hasClass('btn-disabled')) {
					var file = $("#vpnform input[type='radio']:checked").val();
					var postdata = [];
					if (typeof(file) != 'undefined') {
						postdata = { 'file': file };
					}
					setTimeout( function() {
						$('#module-vpn .tile .wrapper').html('<p id="placeholder"></p>');
						spinner('#module-vpn .tile .wrapper #placeholder');
					}, 50);

					$('#module-tor .tile a').toggleClass('btn-primary').toggleClass('btn-disabled');
					$('#module-vpn .tile a').removeClass('btn-primary').addClass('btn-disabled');
					$.ajax({
						type: "POST",
						url: "/admin/toggle_vpn",
						data: postdata,
						success: function(data) {
							if (data == 'SUCCESS') {
								setTimeout( function() {
									updateTiles();
								}, 16000);
							} else {
								pushNotification(['Something went wrong toggling the VPN connection. Are you connected to the Internet?','warning','Close']);
							}
						}
					});
					event.preventDefault();
				}
			});

			$('.upload-vpn').click(function(event) {
				var file = document.getElementById('vpnfile').files[0];
				var size = file.size;

				if (size > 20000) {
					pushNotification(['Sorry, your file is too big. Are you sure it is a valid .ovpn file?','warning','Close']);
					//alert('<?php echo _("Sorry, your file is too big. Are you sure it is a valid .ovpn file?"); ?>');
					return;
				}
				document.getElementById('add-vpn').submit();
			});

			$('.delete-vpn').click(function(event) {
				var file = document.getElementById('myVPN').innerHTML;
				$.ajax({
					type: "POST",
					url: "/admin/delete_vpn",
					data: {
						'file': file
					},
					success: function(data) {
						window.location.href = '/admin/index';
					},
				});

			});

			$('#vpnConnectBtn').click(function(event) {
				var file = $("#vpnform input[type='radio']:checked").val();

				if (typeof(file) == 'undefined') {
					event.preventDefault();
					return false;
				}
			});
		}
		attacheventvpn();

        $('#wifi-refresh').click(function(event) {
			if(!$('#wifi-refresh').hasClass('btn-disabled')) {
				$('#wifi-refresh').toggleClass('btn-disabled btn-primary');
				$('#wan-submit').toggleClass('btn-disabled btn-primary');
				updateWifi();
				setTimeout(function() {
					$('#wifi-refresh').toggleClass('btn-primary btn-disabled');
					$('#wan-submit').toggleClass('btn-primary btn-disabled');
				},8000);
			}
        });


        $('#wan-submit').click(function(event) {
			if(!$('#wifi-refresh').hasClass('btn-disabled')) {        
				pauseMainInterval = '/admin/get_wan_status';
				setTimeout(function(){ pauseMainInterval = ''; },8000);
				spinner('#wan-connection');
				$.ajax({
					type: 'POST',
					url: '/admin/wan',
					data: $('form#wan-form').serialize(),
					success: function(data) {
						if (data == 'SUCCESS') {
						}
					},
				});
				event.preventDefault();
			}
        });

        $(document).on("click", ".open-deleteVPN", function() {
            var myVPNid = $(this).data('id');
            $("#myVPN").html(myVPNid);
            $("#myVPNFile").val(myVPNid);
        });

        $('#nroutingswitch').on('switchChange.bootstrapSwitch', function(event, state) {
			pauseMainInterval = '/admin/routing_status';
			setTimeout(function(){ pauseMainInterval = ''; },12000);
            if (state == 1) {
                console.log('Insecure routing disabled (switch on).');
                $sdata = 'off';
            } else {
                console.log('Insecure routing enabled (switch off).');
                $sdata = 'on';
            };
            $.ajax({
                type: "POST",
                url: "/admin/toggle_routing",
                data: {
                    mode: $sdata
                },
				success: function(data) {
					if (data == 'SUCCESS') {
						$('#nroutingswitch').bootstrapSwitch('state', state );
					}
				}
            });
        });
    });
</script>
